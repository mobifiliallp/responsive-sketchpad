{"version":3,"file":"sketchpad.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAQ,wBAA0BD,IAElCD,EAAgB,UAAIC,GACrB,CATD,CASGK,MAAM,I,gDCPLC,EAA2B,WAC3B,SAASA,EAAUC,EAAIC,GAYnB,GAXAC,KAAKC,WAAY,EACjBD,KAAKE,SAAW,GAChBF,KAAKG,cAAgB,GACrBH,KAAKI,UAAW,EAChBJ,KAAKK,YAAc,EACnBL,KAAKM,YAAa,EAClBN,KAAKO,UAAY,EACjBP,KAAKQ,UAAY,OACjBR,KAAKS,QAAU,QACfT,KAAKU,SAAW,QAChBV,KAAKW,eAAiB,GACZ,MAANb,EACA,MAAM,IAAIc,MAAM,oCAER,MAARb,GACAC,KAAKa,WAAWd,GAEpBC,KAAKc,OAASC,SAASC,cAAc,UACrChB,KAAKiB,IAAMjB,KAAKc,OAAOI,WAAW,MAClC,IAAIC,GAASpB,aAAmC,EAASA,EAAKoB,QAAUrB,EAAGsB,YACvEC,GAAUtB,aAAmC,EAASA,EAAKsB,SAAWF,EAAQnB,KAAKK,YACvFL,KAAKsB,cAAcH,EAAOE,GAC1BvB,EAAGyB,YAAYvB,KAAKc,QAChBd,KAAKE,SAASsB,OAAS,GACvBxB,KAAKyB,SAETzB,KAAK0B,QACT,CA+TA,OA9TAC,OAAOC,eAAe/B,EAAUgC,UAAW,UAAW,CAElDC,IAAK,WACD,OAAO9B,KAAKE,SAAS6B,KAAI,SAAUC,GAAK,OAAOA,EAAEC,OAAS,GAC9D,EACAC,YAAY,EACZC,cAAc,IAElBR,OAAOC,eAAe/B,EAAUgC,UAAW,QAAS,CAEhDC,IAAK,WACD,OAAO9B,KAAKG,cAAc4B,KAAI,SAAUC,GAAK,OAAOA,EAAEC,OAAS,GACnE,EACAC,YAAY,EACZC,cAAc,IAElBR,OAAOC,eAAe/B,EAAUgC,UAAW,OAAQ,CAE/CC,IAAK,WACD,MAAO,CACHM,gBAAiBpC,KAAKoC,gBACtBhC,SAAUJ,KAAKI,SACfe,MAAOnB,KAAKc,OAAOK,MACnBE,OAAQrB,KAAKc,OAAOO,OACpBhB,YAAaL,KAAKc,OAAOK,MAAQnB,KAAKc,OAAOO,OAC7Cf,WAAYN,KAAKM,WACjB+B,KAAM,CACFC,KAAMtC,KAAKO,UACXgC,MAAOvC,KAAKQ,UACZgC,IAAKxC,KAAKS,QACVgC,KAAMzC,KAAKU,SACXgC,WAAY1C,KAAKW,gBAG7B,EACAuB,YAAY,EACZC,cAAc,IAIlBtC,EAAUgC,UAAUc,OAAS,WACzB,MAAO,CACHtC,YAAaL,KAAKc,OAAOK,MAAQnB,KAAKc,OAAOO,OAC7CuB,QAAS5C,KAAK4C,QAEtB,EAEA/C,EAAUgC,UAAUgB,SAAW,SAAUC,GACrC,IAAIC,EAAaD,EAAKF,SAAW,GACjC5C,KAAKE,SAAW6C,EAAWhB,KAAI,SAAUC,GAAK,OAAOgB,EAAOC,QAAQjB,EAAI,IACxEhC,KAAKyB,QACT,EAEA5B,EAAUgC,UAAUqB,UAAY,SAAUC,GACtC,OAAOnD,KAAKc,OAAOoC,UAAUC,EACjC,EAEAtD,EAAUgC,UAAUP,cAAgB,SAAUH,EAAOE,GACjDrB,KAAKc,OAAOsC,aAAa,QAASjC,EAAMkC,YACxCrD,KAAKc,OAAOsC,aAAa,SAAU/B,EAAOgC,YAC1CrD,KAAKc,OAAOwC,MAAMnC,MAAQA,EAAQ,KAClCnB,KAAKc,OAAOwC,MAAMjC,OAASA,EAAS,IACxC,EAEAxB,EAAUgC,UAAU0B,cAAgB,WAChC,MAAO,CACHpC,MAAOnB,KAAKc,OAAOK,MACnBE,OAAQrB,KAAKc,OAAOO,OAE5B,EAEAxB,EAAUgC,UAAU2B,aAAe,SAAUrC,GACzCnB,KAAKO,UAAYY,CACrB,EAEAtB,EAAUgC,UAAU4B,YAAc,SAAUnB,GACxCtC,KAAKO,UAAY+B,CACrB,EAEAzC,EAAUgC,UAAU6B,aAAe,SAAUnB,GACzCvC,KAAKQ,UAAY+B,CACrB,EAEA1C,EAAUgC,UAAU8B,cAAgB,WAChC3D,KAAKM,YAAa,EAClBN,KAAKyB,QACT,EAEA5B,EAAUgC,UAAU+B,aAAe,WAC/B5D,KAAKM,YAAa,EAClBN,KAAKyB,QACT,EAEA5B,EAAUgC,UAAUgC,YAAc,SAAUzD,GACxCJ,KAAKI,SAAWA,CACpB,EAEAP,EAAUgC,UAAUiC,KAAO,WACM,IAAzB9D,KAAKE,SAASsB,SAGlBxB,KAAKG,cAAc4D,KAAK/D,KAAKE,SAAS8D,OACtChE,KAAKyB,SACT,EAEA5B,EAAUgC,UAAUoC,KAAO,WACW,IAA9BjE,KAAKG,cAAcqB,SAGvBxB,KAAKE,SAAS6D,KAAK/D,KAAKG,cAAc6D,OACtChE,KAAKyB,SACT,EAEA5B,EAAUgC,UAAUqC,MAAQ,WACxBlE,KAAKG,cAAgB,GACrBH,KAAKE,SAAW,GAChBF,KAAKyB,QACT,EAEA5B,EAAUgC,UAAUsC,SAAW,SAAUC,EAAOC,EAAKC,GACjDtE,KAAKa,WAAW,CAAEwB,KAAMiC,IACxBF,EAAQpE,KAAKuE,yBAAyB,IAAIC,EAAMJ,EAAMK,EAAGL,EAAMM,IAC/DL,EAAMrE,KAAKuE,yBAAyB,IAAIC,EAAMH,EAAII,EAAGJ,EAAIK,IACzD1E,KAAK2E,WAAW,CAACP,EAAOC,IACxBrE,KAAKyB,QACT,EAEA5B,EAAUgC,UAAU+C,OAAS,SAAUzD,GACnC,IAAIE,EAASF,EAAQnB,KAAKK,YAC1BL,KAAKO,UAAYP,KAAKO,WAAaY,EAAQnB,KAAKc,OAAOK,OACvDnB,KAAKsB,cAAcH,EAAOE,GAC1BrB,KAAKyB,QACT,EAEA5B,EAAUgC,UAAU0C,yBAA2B,SAAUM,GACrD,MAAO,CACHJ,EAAGI,EAAMJ,EAAIzE,KAAKc,OAAOK,MACzBuD,EAAGG,EAAMH,EAAI1E,KAAKc,OAAOO,OAEjC,EAEAxB,EAAUgC,UAAUiD,4BAA8B,SAAU3D,GACxD,OAAOA,EAAQnB,KAAKc,OAAOK,KAC/B,EACAtB,EAAUgC,UAAUhB,WAAa,SAAUd,GACvC,IAAIgF,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EACpBrF,EAAKqC,kBACLpC,KAAKoC,gBAAkBrC,EAAKqC,kBAEP,QAApB2C,EAAKhF,EAAKsC,YAAyB,IAAP0C,OAAgB,EAASA,EAAGzC,QACzDtC,KAAKO,UAAYR,EAAKsC,KAAKC,OAEN,QAApB0C,EAAKjF,EAAKsC,YAAyB,IAAP2C,OAAgB,EAASA,EAAGxC,OACzDxC,KAAKS,QAAUV,EAAKsC,KAAKG,MAEJ,QAApByC,EAAKlF,EAAKsC,YAAyB,IAAP4C,OAAgB,EAASA,EAAGxC,QACzDzC,KAAKU,SAAWX,EAAKsC,KAAKI,OAEL,QAApByC,EAAKnF,EAAKsC,YAAyB,IAAP6C,OAAgB,EAASA,EAAGxC,cACzD1C,KAAKW,eAAiBZ,EAAKsC,KAAKK,YAEhC3C,EAAKM,cACLL,KAAKK,YAAcN,EAAKM,aAExBN,EAAK+C,OACL9C,KAAKE,SAAuI,QAA3HkF,EAAkC,QAA5BD,EAAKpF,EAAK+C,KAAKF,eAA4B,IAAPuC,OAAgB,EAASA,EAAGpD,KAAI,SAAUC,GAAK,OAAOgB,EAAOC,QAAQjB,EAAI,WAAuB,IAAPoD,EAAgBA,EAAK,IAEzKrF,EAAKsF,YACLrF,KAAKqF,UAAYtF,EAAKsF,UAE9B,EAGAxF,EAAUgC,UAAUyD,0BAA4B,SAAUC,GACtD,IAAIV,EACAW,EAAOxF,KAAKc,OAAO2E,wBACvB,GAAIC,EAAaH,GAAI,CACjB,IAAII,EAAaJ,EACjBV,EAAQ,IAAIL,EAAMmB,EAAWC,QAAQ,GAAGC,QAAUL,EAAKM,KAAMH,EAAWC,QAAQ,GAAGG,QAAUP,EAAKQ,IACtG,KACK,CACD,IAAIC,EAAaV,EACjBV,EAAQ,IAAIL,EAAMyB,EAAWJ,QAAUL,EAAKM,KAAMG,EAAWF,QAAUP,EAAKQ,IAChF,CACA,OAAO,IAAIxB,EAAMK,EAAMJ,EAAIzE,KAAKc,OAAOK,MAAO0D,EAAMH,EAAI1E,KAAKc,OAAOO,OACxE,EACAxB,EAAUgC,UAAUqE,eAAiB,SAAUC,GAC3C,OAAO,IAAI3B,EAAM2B,EAAE1B,EAAIzE,KAAKc,OAAOK,MAAOgF,EAAEzB,EAAI1E,KAAKc,OAAOO,OAChE,EACAxB,EAAUgC,UAAUuE,SAAW,SAAUC,EAAIC,GACzC,OAAO,IAAI9B,GAAO6B,EAAG5B,EAAI6B,EAAG7B,GAAK,GAAI4B,EAAG3B,EAAI4B,EAAG5B,GAAK,EACxD,EACA7E,EAAUgC,UAAU0E,6BAA+B,SAAUjE,GACzD,OAAOA,EAAOtC,KAAKc,OAAOK,KAC9B,EACAtB,EAAUgC,UAAU2E,mBAAqB,SAAUrF,GAC/C,OAAOA,EAAQnB,KAAKc,OAAOK,KAC/B,EAEAtB,EAAUgC,UAAU4E,YAAc,WAC9BzG,KAAKiB,IAAIyF,UAAU,EAAG,EAAG1G,KAAKc,OAAOK,MAAOnB,KAAKc,OAAOO,QACpDrB,KAAKoC,kBACLpC,KAAKiB,IAAI0F,UAAY3G,KAAKoC,gBAC1BpC,KAAKiB,IAAI2F,SAAS,EAAG,EAAG5G,KAAKc,OAAOK,MAAOnB,KAAKc,OAAOO,QAE/D,EAEAxB,EAAUgC,UAAUgF,WAAa,SAAUC,GACvC,GAAqB,MAAjBA,EAAOC,OAAX,CAGA,GADA/G,KAAKiB,IAAI+F,YACLhH,KAAKM,WAAY,CACjB,IAAI2G,EAAWjH,KAAKkG,eAAeY,EAAOC,OAAO,IAC7CG,EAAYD,EACZE,EAAgBF,EAChBH,EAAOC,OAAOvF,OAAS,IACvB2F,EAAgBnH,KAAKkG,eAAelG,KAAKoG,SAASU,EAAOC,OAAO,GAAID,EAAOC,OAAO,MAEtF/G,KAAKiB,IAAImG,OAAOH,EAASxC,EAAGwC,EAASvC,GACrC1E,KAAKiB,IAAIoG,iBAAiBH,EAAUzC,EAAGyC,EAAUxC,EAAGyC,EAAc1C,EAAG0C,EAAczC,GACnF,IAAK,IAAI4C,EAAI,EAAGA,EAAIR,EAAOC,OAAOvF,OAAS,EAAG8F,IAC1CL,EAAWE,EACXD,EAAYlH,KAAKkG,eAAeY,EAAOC,OAAOO,IAC9CH,EAAgBnH,KAAKkG,eAAelG,KAAKoG,SAASU,EAAOC,OAAOO,GAAIR,EAAOC,OAAOO,EAAI,KACtFtH,KAAKiB,IAAIoG,iBAAiBH,EAAUzC,EAAGyC,EAAUxC,EAAGyC,EAAc1C,EAAG0C,EAAczC,EAE3F,KACK,CACD,IAAS4C,EAAI,EAAGA,EAAIR,EAAOC,OAAOvF,OAAS,EAAG8F,IAAK,CAC/C,IAAIlD,EAAQpE,KAAKkG,eAAeY,EAAOC,OAAOO,IAC1CjD,EAAMrE,KAAKkG,eAAeY,EAAOC,OAAOO,EAAI,IAChDtH,KAAKiB,IAAImG,OAAOhD,EAAMK,EAAGL,EAAMM,GAC/B1E,KAAKiB,IAAIsG,OAAOlD,EAAII,EAAGJ,EAAIK,EAC/B,CACA1E,KAAKiB,IAAIuG,WACb,CACIV,EAAOvE,QACPvC,KAAKiB,IAAIwG,YAAcX,EAAOvE,OAE9BuE,EAAO3F,QACPnB,KAAKiB,IAAIV,UAAYP,KAAKwG,mBAAmBM,EAAO3F,QAEpD2F,EAAOrE,OACPzC,KAAKiB,IAAIP,SAAWoG,EAAOrE,MAE3BqE,EAAOtE,MACPxC,KAAKiB,IAAIR,QAAUqG,EAAOtE,KAE1BsE,EAAOpE,aACP1C,KAAKiB,IAAIyB,WAAaoE,EAAOpE,YAEjC1C,KAAKiB,IAAI6F,QA1CC,CA2Cd,EACAjH,EAAUgC,UAAU8C,WAAa,SAAUoC,GACvC/G,KAAKE,SAAS6D,KAAKf,EAAOC,QAAQ,CAC9B8D,OAAQA,EACRzE,KAAMtC,KAAKuG,6BAA6BvG,KAAKO,WAC7CgC,MAAOvC,KAAKQ,UACZgC,IAAKxC,KAAKS,QACVgC,KAAMzC,KAAKU,SACXgC,WAAY1C,KAAKW,iBAEzB,EACAd,EAAUgC,UAAU6F,UAAY,SAAU7C,GACtC,IAAIiC,EAAS9G,KAAKE,SAASF,KAAKE,SAASsB,OAAS,GAC9CsF,EAAOC,QACPD,EAAOC,OAAOhD,KAAKc,EAE3B,EAEAhF,EAAUgC,UAAUJ,OAAS,WACzB,IAAIkG,EAAQ3H,KACZA,KAAKyG,cACLzG,KAAKE,SAAS0H,SAAQ,SAAU5F,GAAK,OAAO2F,EAAMd,WAAW7E,EAAI,GACrE,EACAnC,EAAUgC,UAAUH,OAAS,WACzB,IAAIiG,EAAQ3H,KACZ,CAAC,YAAa,cAAc4H,SAAQ,SAAUC,GAC1C,OAAOF,EAAM7G,OAAOgH,iBAAiBD,GAAM,SAAUtC,GAAK,OAAOoC,EAAMI,mBAAmBxC,EAAI,GAClG,IACA,CAAC,YAAa,aAAaqC,SAAQ,SAAUC,GAAQ,OAAOF,EAAM7G,OAAOgH,iBAAiBD,GAAM,SAAUtC,GAAK,OAAOoC,EAAMK,kBAAkBzC,EAAI,GAAI,IACtJ,CAAC,UAAW,aAAc,YAAYqC,SAAQ,SAAUC,GACpD,OAAOF,EAAM7G,OAAOgH,iBAAiBD,GAAM,SAAUtC,GAAK,OAAOoC,EAAMM,iBAAiB1C,EAAI,GAChG,GACJ,EACA1F,EAAUgC,UAAUkG,mBAAqB,SAAUxC,GAE/C,GADAA,EAAE2C,kBACElI,KAAKI,SAAT,CAGAJ,KAAKC,WAAY,EACjB,IAAI4E,EAAQ7E,KAAKsF,0BAA0BC,GAC3CvF,KAAK2E,WAAW,CAACE,IACjB7E,KAAKyB,QAJL,CAKJ,EACA5B,EAAUgC,UAAUmG,kBAAoB,SAAUzC,GAE9C,GADAA,EAAE2C,iBACGlI,KAAKC,UAAV,CAEA,IAAI4E,EAAQ7E,KAAKsF,0BAA0BC,GAC3CvF,KAAK0H,UAAU7C,GACf7E,KAAKyB,QAHK,CAId,EACA5B,EAAUgC,UAAUoG,iBAAmB,SAAU1C,GAE7C,GADAA,EAAE2C,iBACGlI,KAAKC,YAEVD,KAAKC,WAAY,GACbyF,EAAaH,IAAjB,CAGA,IAAIV,EAAQ7E,KAAKsF,0BAA0BC,GAC3CvF,KAAK0H,UAAU7C,GACf7E,KAAKyB,SACDzB,KAAKqF,WACLrF,KAAKqF,WALT,CAOJ,EACOxF,CACX,CA7V8B,GA+V9B,SAAS6F,EAAaH,GAClB,OAAoC,IAA7BA,EAAEpC,KAAKgF,QAAQ,QAC1B,CAHA3I,EAAA,QAAkBK,EAIlB,IAAI2E,EACA,SAAeC,EAAGC,GACd1E,KAAKyE,EAAIA,EACTzE,KAAK0E,EAAIA,CACb,EAGA1B,EAAwB,WACxB,SAASA,IACT,CAqBA,OApBAA,EAAOC,QAAU,SAAUjB,GACvB,IAAI8E,EAAS,IAAI9D,EAOjB,OANA8D,EAAOC,OAAS/E,EAAE+E,OAClBD,EAAO3F,MAAQa,EAAEM,KACjBwE,EAAOvE,MAAQP,EAAEO,MACjBuE,EAAOtE,IAAMR,EAAEQ,IACfsE,EAAOrE,KAAOT,EAAES,KAChBqE,EAAOpE,WAAaV,EAAEU,WACfoE,CACX,EACA9D,EAAOnB,UAAUI,MAAQ,WACrB,MAAO,CACH8E,OAAQ/G,KAAK+G,OACbzE,KAAMtC,KAAKmB,MACXoB,MAAOvC,KAAKuC,MACZC,IAAKxC,KAAKwC,IACVC,KAAMzC,KAAKyC,KACXC,WAAY1C,KAAK0C,WAEzB,EACOM,CACX,CAxB2B,E","sources":["webpack://Sketchpad/webpack/universalModuleDefinition","webpack://Sketchpad/./src/sketchpad.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"responsive-sketchpad\"] = factory();\n\telse\n\t\troot[\"Sketchpad\"] = factory();\n})(self, () => {\nreturn ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Sketchpad = /** @class */ (function () {\n    function Sketchpad(el, opts) {\n        this.sketching = false;\n        this._strokes = []; // v2.0 - Rename to strokes\n        this.undoneStrokes = [];\n        this.readOnly = false;\n        this.aspectRatio = 1; // v2.0 - Remove; rely on canvas as source-of-truth\n        this.curvesMode = false;\n        this.lineWidth = 5;\n        this.lineColor = '#000';\n        this.lineCap = 'round';\n        this.lineJoin = 'round';\n        this.lineMiterLimit = 10;\n        if (el == null) {\n            throw new Error('Must pass in a container element');\n        }\n        if (opts != null) {\n            this.setOptions(opts);\n        }\n        this.canvas = document.createElement('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        var width = (opts === null || opts === void 0 ? void 0 : opts.width) || el.clientWidth;\n        var height = (opts === null || opts === void 0 ? void 0 : opts.height) || width * this.aspectRatio;\n        this.setCanvasSize(width, height);\n        el.appendChild(this.canvas);\n        if (this._strokes.length > 0) {\n            this.redraw();\n        }\n        this.listen();\n    }\n    Object.defineProperty(Sketchpad.prototype, \"strokes\", {\n        // v2.0 - Remove; rename `_strokes`\n        get: function () {\n            return this._strokes.map(function (s) { return s.toObj(); });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Sketchpad.prototype, \"undos\", {\n        // v2.0 - Remove\n        get: function () {\n            return this.undoneStrokes.map(function (s) { return s.toObj(); });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Sketchpad.prototype, \"opts\", {\n        // v2.0 - Remove\n        get: function () {\n            return {\n                backgroundColor: this.backgroundColor,\n                readOnly: this.readOnly,\n                width: this.canvas.width,\n                height: this.canvas.height,\n                aspectRatio: this.canvas.width / this.canvas.height,\n                curvesMode: this.curvesMode,\n                line: {\n                    size: this.lineWidth,\n                    color: this.lineColor,\n                    cap: this.lineCap,\n                    join: this.lineJoin,\n                    miterLimit: this.lineMiterLimit,\n                },\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // Convert the sketchpad to a JSON object that can be loaded into\n    // other sketchpads or stored on a server\n    Sketchpad.prototype.toJSON = function () {\n        return {\n            aspectRatio: this.canvas.width / this.canvas.height,\n            strokes: this.strokes,\n        };\n    };\n    // Load a json object into the sketchpad\n    Sketchpad.prototype.loadJSON = function (data) {\n        var strokeObjs = data.strokes || [];\n        this._strokes = strokeObjs.map(function (s) { return Stroke.fromObj(s); });\n        this.redraw();\n    };\n    // Converts to image File\n    Sketchpad.prototype.toDataURL = function (type) {\n        return this.canvas.toDataURL(type);\n    };\n    // Set the size of canvas\n    Sketchpad.prototype.setCanvasSize = function (width, height) {\n        this.canvas.setAttribute('width', width.toString());\n        this.canvas.setAttribute('height', height.toString());\n        this.canvas.style.width = width + 'px';\n        this.canvas.style.height = height + 'px';\n    };\n    // Get the size of the canvas\n    Sketchpad.prototype.getCanvasSize = function () {\n        return {\n            width: this.canvas.width,\n            height: this.canvas.height,\n        };\n    };\n    // Set the line width\n    Sketchpad.prototype.setLineWidth = function (width) {\n        this.lineWidth = width;\n    };\n    // Set the line width\n    Sketchpad.prototype.setLineSize = function (size) {\n        this.lineWidth = size;\n    };\n    // Set the line color\n    Sketchpad.prototype.setLineColor = function (color) {\n        this.lineColor = color;\n    };\n    // Set curve mode - use quadratic curves\n    Sketchpad.prototype.setCurvesMode = function () {\n        this.curvesMode = true;\n        this.redraw();\n    };\n    // set lines mode - use straight lines\n    Sketchpad.prototype.setLinesMode = function () {\n        this.curvesMode = false;\n        this.redraw();\n    };\n    // Set whether or not new strokes can be drawn on the canvas\n    Sketchpad.prototype.setReadOnly = function (readOnly) {\n        this.readOnly = readOnly;\n    };\n    // Undo the last stroke\n    Sketchpad.prototype.undo = function () {\n        if (this._strokes.length === 0) {\n            return;\n        }\n        this.undoneStrokes.push(this._strokes.pop());\n        this.redraw();\n    };\n    // Redo the last undone stroke\n    Sketchpad.prototype.redo = function () {\n        if (this.undoneStrokes.length === 0) {\n            return;\n        }\n        this._strokes.push(this.undoneStrokes.pop());\n        this.redraw();\n    };\n    // Clear the sketchpad\n    Sketchpad.prototype.clear = function () {\n        this.undoneStrokes = [];\n        this._strokes = [];\n        this.redraw();\n    };\n    // Draw a straight line\n    Sketchpad.prototype.drawLine = function (start, end, lineOpts) {\n        this.setOptions({ line: lineOpts });\n        start = this.getPointRelativeToCanvas(new Point(start.x, start.y));\n        end = this.getPointRelativeToCanvas(new Point(end.x, end.y));\n        this.pushStroke([start, end]);\n        this.redraw();\n    };\n    // Resize the canvas maintaining original aspect ratio\n    Sketchpad.prototype.resize = function (width) {\n        var height = width * this.aspectRatio;\n        this.lineWidth = this.lineWidth * (width / this.canvas.width);\n        this.setCanvasSize(width, height);\n        this.redraw();\n    };\n    // Returns a points x,y locations relative to the size of the canvas\n    Sketchpad.prototype.getPointRelativeToCanvas = function (point) {\n        return {\n            x: point.x / this.canvas.width,\n            y: point.y / this.canvas.height,\n        };\n    };\n    //  Get the line size relative to the size of the canvas\n    Sketchpad.prototype.getLineSizeRelativeToCanvas = function (width) {\n        return width / this.canvas.width;\n    };\n    Sketchpad.prototype.setOptions = function (opts) {\n        var _a, _b, _c, _d, _e, _f;\n        if (opts.backgroundColor) {\n            this.backgroundColor = opts.backgroundColor;\n        }\n        if ((_a = opts.line) === null || _a === void 0 ? void 0 : _a.size) {\n            this.lineWidth = opts.line.size;\n        }\n        if ((_b = opts.line) === null || _b === void 0 ? void 0 : _b.cap) {\n            this.lineCap = opts.line.cap;\n        }\n        if ((_c = opts.line) === null || _c === void 0 ? void 0 : _c.join) {\n            this.lineJoin = opts.line.join;\n        }\n        if ((_d = opts.line) === null || _d === void 0 ? void 0 : _d.miterLimit) {\n            this.lineMiterLimit = opts.line.miterLimit;\n        }\n        if (opts.aspectRatio) {\n            this.aspectRatio = opts.aspectRatio;\n        }\n        if (opts.data) {\n            this._strokes = (_f = (_e = opts.data.strokes) === null || _e === void 0 ? void 0 : _e.map(function (s) { return Stroke.fromObj(s); })) !== null && _f !== void 0 ? _f : [];\n        }\n        if (opts.onDrawEnd) {\n            this.onDrawEnd = opts.onDrawEnd;\n        }\n    };\n    // For a given event, get the point at which the event occurred\n    // relative to the canvas\n    Sketchpad.prototype.getCursorRelativeToCanvas = function (e) {\n        var point;\n        var rect = this.canvas.getBoundingClientRect();\n        if (isTouchEvent(e)) {\n            var touchEvent = e;\n            point = new Point(touchEvent.touches[0].clientX - rect.left, touchEvent.touches[0].clientY - rect.top);\n        }\n        else {\n            var mouseEvent = e;\n            point = new Point(mouseEvent.clientX - rect.left, mouseEvent.clientY - rect.top);\n        }\n        return new Point(point.x / this.canvas.width, point.y / this.canvas.height);\n    };\n    Sketchpad.prototype.normalizePoint = function (p) {\n        return new Point(p.x * this.canvas.width, p.y * this.canvas.height);\n    };\n    Sketchpad.prototype.midPoint = function (p1, p2) {\n        return new Point((p1.x + p2.x) / 2, (p1.y + p2.y) / 2);\n    };\n    Sketchpad.prototype.getLineWidthRelativeToCanvas = function (size) {\n        return size / this.canvas.width;\n    };\n    Sketchpad.prototype.normalizeLineWidth = function (width) {\n        return width * this.canvas.width;\n    };\n    // Erase the entire canvas\n    Sketchpad.prototype.clearCanvas = function () {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        if (this.backgroundColor) {\n            this.ctx.fillStyle = this.backgroundColor;\n            this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        }\n    };\n    // Draw a single stroke\n    Sketchpad.prototype.drawStroke = function (stroke) {\n        if (stroke.points == null)\n            return;\n        this.ctx.beginPath();\n        if (this.curvesMode) {\n            var originPt = this.normalizePoint(stroke.points[0]);\n            var controlPt = originPt;\n            var destinationPt = originPt;\n            if (stroke.points.length > 1) {\n                destinationPt = this.normalizePoint(this.midPoint(stroke.points[0], stroke.points[1]));\n            }\n            this.ctx.moveTo(originPt.x, originPt.y);\n            this.ctx.quadraticCurveTo(controlPt.x, controlPt.y, destinationPt.x, destinationPt.y);\n            for (var i = 1; i < stroke.points.length - 1; i++) {\n                originPt = destinationPt;\n                controlPt = this.normalizePoint(stroke.points[i]);\n                destinationPt = this.normalizePoint(this.midPoint(stroke.points[i], stroke.points[i + 1]));\n                this.ctx.quadraticCurveTo(controlPt.x, controlPt.y, destinationPt.x, destinationPt.y);\n            }\n        }\n        else {\n            for (var i = 0; i < stroke.points.length - 1; i++) {\n                var start = this.normalizePoint(stroke.points[i]);\n                var end = this.normalizePoint(stroke.points[i + 1]);\n                this.ctx.moveTo(start.x, start.y);\n                this.ctx.lineTo(end.x, end.y);\n            }\n            this.ctx.closePath();\n        }\n        if (stroke.color) {\n            this.ctx.strokeStyle = stroke.color;\n        }\n        if (stroke.width) {\n            this.ctx.lineWidth = this.normalizeLineWidth(stroke.width);\n        }\n        if (stroke.join) {\n            this.ctx.lineJoin = stroke.join;\n        }\n        if (stroke.cap) {\n            this.ctx.lineCap = stroke.cap;\n        }\n        if (stroke.miterLimit) {\n            this.ctx.miterLimit = stroke.miterLimit;\n        }\n        this.ctx.stroke();\n    };\n    Sketchpad.prototype.pushStroke = function (points) {\n        this._strokes.push(Stroke.fromObj({\n            points: points,\n            size: this.getLineWidthRelativeToCanvas(this.lineWidth),\n            color: this.lineColor,\n            cap: this.lineCap,\n            join: this.lineJoin,\n            miterLimit: this.lineMiterLimit,\n        }));\n    };\n    Sketchpad.prototype.pushPoint = function (point) {\n        var stroke = this._strokes[this._strokes.length - 1];\n        if (stroke.points) {\n            stroke.points.push(point);\n        }\n    };\n    // Redraw the whole canvas\n    Sketchpad.prototype.redraw = function () {\n        var _this = this;\n        this.clearCanvas();\n        this._strokes.forEach(function (s) { return _this.drawStroke(s); });\n    };\n    Sketchpad.prototype.listen = function () {\n        var _this = this;\n        ['mousedown', 'touchstart'].forEach(function (name) {\n            return _this.canvas.addEventListener(name, function (e) { return _this.startStrokeHandler(e); });\n        });\n        ['mousemove', 'touchmove'].forEach(function (name) { return _this.canvas.addEventListener(name, function (e) { return _this.drawStrokeHandler(e); }); });\n        ['mouseup', 'mouseleave', 'touchend'].forEach(function (name) {\n            return _this.canvas.addEventListener(name, function (e) { return _this.endStrokeHandler(e); });\n        });\n    };\n    Sketchpad.prototype.startStrokeHandler = function (e) {\n        e.preventDefault();\n        if (this.readOnly) {\n            return;\n        }\n        this.sketching = true;\n        var point = this.getCursorRelativeToCanvas(e);\n        this.pushStroke([point]);\n        this.redraw();\n    };\n    Sketchpad.prototype.drawStrokeHandler = function (e) {\n        e.preventDefault();\n        if (!this.sketching)\n            return;\n        var point = this.getCursorRelativeToCanvas(e);\n        this.pushPoint(point);\n        this.redraw();\n    };\n    Sketchpad.prototype.endStrokeHandler = function (e) {\n        e.preventDefault();\n        if (!this.sketching)\n            return;\n        this.sketching = false;\n        if (isTouchEvent(e)) {\n            return; // touchend events do not have a position\n        }\n        var point = this.getCursorRelativeToCanvas(e);\n        this.pushPoint(point);\n        this.redraw();\n        if (this.onDrawEnd) {\n            this.onDrawEnd();\n        }\n    };\n    return Sketchpad;\n}());\nexports.default = Sketchpad;\nfunction isTouchEvent(e) {\n    return e.type.indexOf('touch') !== -1; // v2.0 - Switch to startsWith\n}\nvar Point = /** @class */ (function () {\n    function Point(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    return Point;\n}());\nvar Stroke = /** @class */ (function () {\n    function Stroke() {\n    }\n    Stroke.fromObj = function (s) {\n        var stroke = new Stroke();\n        stroke.points = s.points;\n        stroke.width = s.size;\n        stroke.color = s.color;\n        stroke.cap = s.cap;\n        stroke.join = s.join;\n        stroke.miterLimit = s.miterLimit;\n        return stroke;\n    };\n    Stroke.prototype.toObj = function () {\n        return {\n            points: this.points,\n            size: this.width,\n            color: this.color,\n            cap: this.cap,\n            join: this.join,\n            miterLimit: this.miterLimit,\n        };\n    };\n    return Stroke;\n}());\n"],"names":["root","factory","exports","module","define","amd","self","Sketchpad","el","opts","this","sketching","_strokes","undoneStrokes","readOnly","aspectRatio","curvesMode","lineWidth","lineColor","lineCap","lineJoin","lineMiterLimit","Error","setOptions","canvas","document","createElement","ctx","getContext","width","clientWidth","height","setCanvasSize","appendChild","length","redraw","listen","Object","defineProperty","prototype","get","map","s","toObj","enumerable","configurable","backgroundColor","line","size","color","cap","join","miterLimit","toJSON","strokes","loadJSON","data","strokeObjs","Stroke","fromObj","toDataURL","type","setAttribute","toString","style","getCanvasSize","setLineWidth","setLineSize","setLineColor","setCurvesMode","setLinesMode","setReadOnly","undo","push","pop","redo","clear","drawLine","start","end","lineOpts","getPointRelativeToCanvas","Point","x","y","pushStroke","resize","point","getLineSizeRelativeToCanvas","_a","_b","_c","_d","_e","_f","onDrawEnd","getCursorRelativeToCanvas","e","rect","getBoundingClientRect","isTouchEvent","touchEvent","touches","clientX","left","clientY","top","mouseEvent","normalizePoint","p","midPoint","p1","p2","getLineWidthRelativeToCanvas","normalizeLineWidth","clearCanvas","clearRect","fillStyle","fillRect","drawStroke","stroke","points","beginPath","originPt","controlPt","destinationPt","moveTo","quadraticCurveTo","i","lineTo","closePath","strokeStyle","pushPoint","_this","forEach","name","addEventListener","startStrokeHandler","drawStrokeHandler","endStrokeHandler","preventDefault","indexOf"],"sourceRoot":""}